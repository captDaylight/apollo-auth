# source: https://us1.prisma.sh/paulchristophe6-1adc8b/traveler/dev
# timestamp: Wed Aug 01 2018 17:15:27 GMT-0400 (EDT)

type AggregateTrip {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTrip(data: TripCreateInput!): Trip!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTrip(data: TripUpdateInput!, where: TripWhereUniqueInput!): Trip
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTrip(where: TripWhereUniqueInput!): Trip
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTrip(where: TripWhereUniqueInput!, create: TripCreateInput!, update: TripUpdateInput!): Trip!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyTrips(data: TripUpdateInput!, where: TripWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTrips(where: TripWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  trips(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trip]!
  user(where: UserWhereUniqueInput!): User
  trip(where: TripWhereUniqueInput!): Trip
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  tripsConnection(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TripConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  trip(where: TripSubscriptionWhereInput): TripSubscriptionPayload
}

type Trip implements Node {
  id: ID!
  name: String!
  description: String
  travelers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  organizers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type TripConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TripEdge]!
  aggregate: AggregateTrip!
}

input TripCreateInput {
  name: String!
  description: String
  travelers: UserCreateManyWithoutTripsInput
  organizers: UserCreateManyWithoutTripsOrganizingInput
}

input TripCreateManyWithoutOrganizersInput {
  create: [TripCreateWithoutOrganizersInput!]
  connect: [TripWhereUniqueInput!]
}

input TripCreateManyWithoutTravelersInput {
  create: [TripCreateWithoutTravelersInput!]
  connect: [TripWhereUniqueInput!]
}

input TripCreateWithoutOrganizersInput {
  name: String!
  description: String
  travelers: UserCreateManyWithoutTripsInput
}

input TripCreateWithoutTravelersInput {
  name: String!
  description: String
  organizers: UserCreateManyWithoutTripsOrganizingInput
}

"""An edge in a connection."""
type TripEdge {
  """The item at the end of the edge."""
  node: Trip!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TripOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TripPreviousValues {
  id: ID!
  name: String!
  description: String
}

type TripSubscriptionPayload {
  mutation: MutationType!
  node: Trip
  updatedFields: [String!]
  previousValues: TripPreviousValues
}

input TripSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TripSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TripSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TripSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TripWhereInput
}

input TripUpdateInput {
  name: String
  description: String
  travelers: UserUpdateManyWithoutTripsInput
  organizers: UserUpdateManyWithoutTripsOrganizingInput
}

input TripUpdateManyWithoutOrganizersInput {
  create: [TripCreateWithoutOrganizersInput!]
  connect: [TripWhereUniqueInput!]
  disconnect: [TripWhereUniqueInput!]
  delete: [TripWhereUniqueInput!]
  update: [TripUpdateWithWhereUniqueWithoutOrganizersInput!]
  upsert: [TripUpsertWithWhereUniqueWithoutOrganizersInput!]
}

input TripUpdateManyWithoutTravelersInput {
  create: [TripCreateWithoutTravelersInput!]
  connect: [TripWhereUniqueInput!]
  disconnect: [TripWhereUniqueInput!]
  delete: [TripWhereUniqueInput!]
  update: [TripUpdateWithWhereUniqueWithoutTravelersInput!]
  upsert: [TripUpsertWithWhereUniqueWithoutTravelersInput!]
}

input TripUpdateWithoutOrganizersDataInput {
  name: String
  description: String
  travelers: UserUpdateManyWithoutTripsInput
}

input TripUpdateWithoutTravelersDataInput {
  name: String
  description: String
  organizers: UserUpdateManyWithoutTripsOrganizingInput
}

input TripUpdateWithWhereUniqueWithoutOrganizersInput {
  where: TripWhereUniqueInput!
  data: TripUpdateWithoutOrganizersDataInput!
}

input TripUpdateWithWhereUniqueWithoutTravelersInput {
  where: TripWhereUniqueInput!
  data: TripUpdateWithoutTravelersDataInput!
}

input TripUpsertWithWhereUniqueWithoutOrganizersInput {
  where: TripWhereUniqueInput!
  update: TripUpdateWithoutOrganizersDataInput!
  create: TripCreateWithoutOrganizersInput!
}

input TripUpsertWithWhereUniqueWithoutTravelersInput {
  where: TripWhereUniqueInput!
  update: TripUpdateWithoutTravelersDataInput!
  create: TripCreateWithoutTravelersInput!
}

input TripWhereInput {
  """Logical AND on all given filters."""
  AND: [TripWhereInput!]

  """Logical OR on all given filters."""
  OR: [TripWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TripWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  travelers_every: UserWhereInput
  travelers_some: UserWhereInput
  travelers_none: UserWhereInput
  organizers_every: UserWhereInput
  organizers_some: UserWhereInput
  organizers_none: UserWhereInput
}

input TripWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  email: String!
  name: String
  password: String!
  verified: Boolean!
  trips(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trip!]
  tripsOrganizing(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trip!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  name: String
  password: String!
  verified: Boolean
  trips: TripCreateManyWithoutTravelersInput
  tripsOrganizing: TripCreateManyWithoutOrganizersInput
}

input UserCreateManyWithoutTripsInput {
  create: [UserCreateWithoutTripsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTripsOrganizingInput {
  create: [UserCreateWithoutTripsOrganizingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutTripsInput {
  email: String!
  name: String
  password: String!
  verified: Boolean
  tripsOrganizing: TripCreateManyWithoutOrganizersInput
}

input UserCreateWithoutTripsOrganizingInput {
  email: String!
  name: String
  password: String!
  verified: Boolean
  trips: TripCreateManyWithoutTravelersInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  verified_ASC
  verified_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String
  password: String!
  verified: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  verified: Boolean
  trips: TripUpdateManyWithoutTravelersInput
  tripsOrganizing: TripUpdateManyWithoutOrganizersInput
}

input UserUpdateManyWithoutTripsInput {
  create: [UserCreateWithoutTripsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTripsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTripsInput!]
}

input UserUpdateManyWithoutTripsOrganizingInput {
  create: [UserCreateWithoutTripsOrganizingInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTripsOrganizingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTripsOrganizingInput!]
}

input UserUpdateWithoutTripsDataInput {
  email: String
  name: String
  password: String
  verified: Boolean
  tripsOrganizing: TripUpdateManyWithoutOrganizersInput
}

input UserUpdateWithoutTripsOrganizingDataInput {
  email: String
  name: String
  password: String
  verified: Boolean
  trips: TripUpdateManyWithoutTravelersInput
}

input UserUpdateWithWhereUniqueWithoutTripsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTripsDataInput!
}

input UserUpdateWithWhereUniqueWithoutTripsOrganizingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTripsOrganizingDataInput!
}

input UserUpsertWithWhereUniqueWithoutTripsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTripsDataInput!
  create: UserCreateWithoutTripsInput!
}

input UserUpsertWithWhereUniqueWithoutTripsOrganizingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTripsOrganizingDataInput!
  create: UserCreateWithoutTripsOrganizingInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
  trips_every: TripWhereInput
  trips_some: TripWhereInput
  trips_none: TripWhereInput
  tripsOrganizing_every: TripWhereInput
  tripsOrganizing_some: TripWhereInput
  tripsOrganizing_none: TripWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
